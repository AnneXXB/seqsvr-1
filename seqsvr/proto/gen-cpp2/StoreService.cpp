/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "StoreService.h"

#include "StoreService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
namespace seqsvr {

std::unique_ptr<apache::thrift::AsyncProcessor> StoreServiceSvIf::getProcessor() {
  return std::make_unique<StoreServiceAsyncProcessor>(this);
}

void StoreServiceSvIf::LoadMaxSeqsData( ::seqsvr::MaxSeqsData& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("LoadMaxSeqsData");
}

folly::Future<std::unique_ptr< ::seqsvr::MaxSeqsData>> StoreServiceSvIf::future_LoadMaxSeqsData() {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::seqsvr::MaxSeqsData& _return) { LoadMaxSeqsData(_return); });
}

void StoreServiceSvIf::async_tm_LoadMaxSeqsData(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::MaxSeqsData>>> callback) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_LoadMaxSeqsData(); });
}

int64_t StoreServiceSvIf::SaveMaxSeq(int32_t /*id*/, int64_t /*max_seq*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("SaveMaxSeq");
}

folly::Future<int64_t> StoreServiceSvIf::future_SaveMaxSeq(int32_t id, int64_t max_seq) {
  return apache::thrift::detail::si::future([&] { return SaveMaxSeq(id, max_seq); });
}

void StoreServiceSvIf::async_tm_SaveMaxSeq(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t id, int64_t max_seq) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_SaveMaxSeq(id, max_seq); });
}

void StoreServiceSvIf::LoadRouteTable( ::seqsvr::Router& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("LoadRouteTable");
}

folly::Future<std::unique_ptr< ::seqsvr::Router>> StoreServiceSvIf::future_LoadRouteTable() {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::seqsvr::Router& _return) { LoadRouteTable(_return); });
}

void StoreServiceSvIf::async_tm_LoadRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::Router>>> callback) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_LoadRouteTable(); });
}

bool StoreServiceSvIf::SaveRouteTable(std::unique_ptr< ::seqsvr::Router> /*router*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("SaveRouteTable");
}

folly::Future<bool> StoreServiceSvIf::future_SaveRouteTable(std::unique_ptr< ::seqsvr::Router> router) {
  return apache::thrift::detail::si::future([&] { return SaveRouteTable(std::move(router)); });
}

void StoreServiceSvIf::async_tm_SaveRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, std::unique_ptr< ::seqsvr::Router> router) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_SaveRouteTable(std::move(router)); });
}

void StoreServiceSvNull::LoadMaxSeqsData( ::seqsvr::MaxSeqsData& /*_return*/) {}

int64_t StoreServiceSvNull::SaveMaxSeq(int32_t /*id*/, int64_t /*max_seq*/) {
  return 0;
}

void StoreServiceSvNull::LoadRouteTable( ::seqsvr::Router& /*_return*/) {}

bool StoreServiceSvNull::SaveRouteTable(std::unique_ptr< ::seqsvr::Router> /*router*/) {
  return 0;
}

const char* StoreServiceAsyncProcessor::getServiceName() {
  return "StoreService";
}

folly::Optional<std::string> StoreServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void StoreServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool StoreServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> StoreServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> StoreServiceAsyncProcessor::cacheKeyMap_ {};
const StoreServiceAsyncProcessor::BinaryProtocolProcessMap& StoreServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const StoreServiceAsyncProcessor::BinaryProtocolProcessMap StoreServiceAsyncProcessor::binaryProcessMap_ {
  {"LoadMaxSeqsData", &StoreServiceAsyncProcessor::_processInThread_LoadMaxSeqsData<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"SaveMaxSeq", &StoreServiceAsyncProcessor::_processInThread_SaveMaxSeq<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"LoadRouteTable", &StoreServiceAsyncProcessor::_processInThread_LoadRouteTable<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"SaveRouteTable", &StoreServiceAsyncProcessor::_processInThread_SaveRouteTable<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const StoreServiceAsyncProcessor::CompactProtocolProcessMap& StoreServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const StoreServiceAsyncProcessor::CompactProtocolProcessMap StoreServiceAsyncProcessor::compactProcessMap_ {
  {"LoadMaxSeqsData", &StoreServiceAsyncProcessor::_processInThread_LoadMaxSeqsData<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"SaveMaxSeq", &StoreServiceAsyncProcessor::_processInThread_SaveMaxSeq<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"LoadRouteTable", &StoreServiceAsyncProcessor::_processInThread_LoadRouteTable<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"SaveRouteTable", &StoreServiceAsyncProcessor::_processInThread_SaveRouteTable<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
