/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "seqsvr_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
// #include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
namespace seqsvr {

template <class Protocol_>
uint32_t NodeAddrInfo::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t NodeAddrInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeAddrInfo");
  xfer += prot_->serializedFieldSize("ip", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->ip);
  xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->port);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeAddrInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeAddrInfo");
  xfer += prot_->serializedFieldSize("ip", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->ip);
  xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->port);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeAddrInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NodeAddrInfo");
  xfer += prot_->writeFieldBegin("ip", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->ip);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("port", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->port);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t RangeID::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_begin);
          this->__isset.id_begin = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t RangeID::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RangeID");
  xfer += prot_->serializedFieldSize("id_begin", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->id_begin);
  xfer += prot_->serializedFieldSize("size", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->size);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RangeID::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RangeID");
  xfer += prot_->serializedFieldSize("id_begin", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->id_begin);
  xfer += prot_->serializedFieldSize("size", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->size);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RangeID::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RangeID");
  xfer += prot_->writeFieldBegin("id_begin", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->id_begin);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("size", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->size);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t RouterNode::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::read(iprot, &this->node_addr);
          this->__isset.node_addr = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->section_ranges = std::vector< ::seqsvr::RangeID>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RangeID>>::read(*iprot, this->section_ranges);
          this->__isset.section_ranges = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t RouterNode::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RouterNode");
  xfer += prot_->serializedFieldSize("node_addr", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::serializedSize(prot_, &this->node_addr);
  xfer += prot_->serializedFieldSize("section_ranges", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RangeID>>::serializedSize<false>(*prot_, this->section_ranges);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RouterNode::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RouterNode");
  xfer += prot_->serializedFieldSize("node_addr", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::serializedSizeZC(prot_, &this->node_addr);
  xfer += prot_->serializedFieldSize("section_ranges", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RangeID>>::serializedSize<false>(*prot_, this->section_ranges);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RouterNode::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RouterNode");
  xfer += prot_->writeFieldBegin("node_addr", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::write(prot_, &this->node_addr);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("section_ranges", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RangeID>>::write(*prot_, this->section_ranges);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t Router::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->node_list = std::vector< ::seqsvr::RouterNode>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::read(*iprot, this->node_list);
          this->__isset.node_list = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Router::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Router");
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->version);
  xfer += prot_->serializedFieldSize("node_list", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::serializedSize<false>(*prot_, this->node_list);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Router::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Router");
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->version);
  xfer += prot_->serializedFieldSize("node_list", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::serializedSize<false>(*prot_, this->node_list);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Router::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Router");
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("node_list", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::write(*prot_, this->node_list);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t SetNodeInfo::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::read(iprot, &this->set_id);
          this->__isset.set_id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::read(iprot, &this->node_addr);
          this->__isset.node_addr = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetNodeInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeInfo");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSize(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("node_addr", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::serializedSize(prot_, &this->node_addr);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeInfo");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSizeZC(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("node_addr", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::serializedSizeZC(prot_, &this->node_addr);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetNodeInfo");
  xfer += prot_->writeFieldBegin("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::write(prot_, &this->set_id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("node_addr", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::write(prot_, &this->node_addr);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t SetNodeInfoList::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::read(iprot, &this->set_id);
          this->__isset.set_id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->node_addrs = std::vector< ::seqsvr::NodeAddrInfo>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::NodeAddrInfo>>::read(*iprot, this->node_addrs);
          this->__isset.node_addrs = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetNodeInfoList::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeInfoList");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSize(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("node_addrs", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::NodeAddrInfo>>::serializedSize<false>(*prot_, this->node_addrs);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeInfoList::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeInfoList");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSizeZC(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("node_addrs", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::NodeAddrInfo>>::serializedSize<false>(*prot_, this->node_addrs);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeInfoList::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetNodeInfoList");
  xfer += prot_->writeFieldBegin("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::write(prot_, &this->set_id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("node_addrs", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::NodeAddrInfo>>::write(*prot_, this->node_addrs);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t PerSetRouterTable::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::read(iprot, &this->set_id);
          this->__isset.set_id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->node_list = std::vector< ::seqsvr::RouterNode>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::read(*iprot, this->node_list);
          this->__isset.node_list = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t PerSetRouterTable::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("PerSetRouterTable");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSize(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("node_list", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::serializedSize<false>(*prot_, this->node_list);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t PerSetRouterTable::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("PerSetRouterTable");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSizeZC(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("node_list", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::serializedSize<false>(*prot_, this->node_list);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t PerSetRouterTable::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("PerSetRouterTable");
  xfer += prot_->writeFieldBegin("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::write(prot_, &this->set_id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("node_list", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::seqsvr::RouterNode>>::write(*prot_, this->node_list);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t Sequence::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequence);
          this->__isset.sequence = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::Router>::read(iprot, &this->router);
          this->__isset.router = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Sequence::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Sequence");
  xfer += prot_->serializedFieldSize("sequence", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->sequence);
  if (this->__isset.router) {
    xfer += prot_->serializedFieldSize("router", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::Router>::serializedSize(prot_, &this->router);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Sequence::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Sequence");
  xfer += prot_->serializedFieldSize("sequence", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->sequence);
  if (this->__isset.router) {
    xfer += prot_->serializedFieldSize("router", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::Router>::serializedSizeZC(prot_, &this->router);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Sequence::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Sequence");
  xfer += prot_->writeFieldBegin("sequence", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->sequence);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.router) {
    xfer += prot_->writeFieldBegin("router", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::Router>::write(prot_, &this->router);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

template <class Protocol_>
uint32_t MaxSeqsData::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::read(iprot, &this->set_id);
          this->__isset.set_id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->max_seqs = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->max_seqs);
          this->__isset.max_seqs = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MaxSeqsData::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MaxSeqsData");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSize(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("max_seqs", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->max_seqs);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MaxSeqsData::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MaxSeqsData");
  xfer += prot_->serializedFieldSize("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::serializedSizeZC(prot_, &this->set_id);
  xfer += prot_->serializedFieldSize("max_seqs", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->max_seqs);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MaxSeqsData::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MaxSeqsData");
  xfer += prot_->writeFieldBegin("set_id", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::write(prot_, &this->set_id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("max_seqs", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->max_seqs);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

} // seqsvr
