/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>



#include "seqsvr_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace seqsvr {

class StoreServiceSvAsyncIf {
 public:
  virtual ~StoreServiceSvAsyncIf() {}
  virtual void async_tm_LoadMaxSeqsData(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::MaxSeqsData>>> callback) = 0;
  // virtual void async_LoadMaxSeqsData(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::MaxSeqsData>>> callback) = delete;
  virtual folly::Future<std::unique_ptr< ::seqsvr::MaxSeqsData>> future_LoadMaxSeqsData() = 0;
  virtual void async_tm_SaveMaxSeq(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t id, int64_t max_seq) = 0;
  // virtual void async_SaveMaxSeq(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t id, int64_t max_seq) = delete;
  virtual folly::Future<int64_t> future_SaveMaxSeq(int32_t id, int64_t max_seq) = 0;
  virtual void async_tm_LoadRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::Router>>> callback) = 0;
  // virtual void async_LoadRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::Router>>> callback) = delete;
  virtual folly::Future<std::unique_ptr< ::seqsvr::Router>> future_LoadRouteTable() = 0;
  virtual void async_tm_SaveRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, std::unique_ptr< ::seqsvr::Router> router) = 0;
  // virtual void async_SaveRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, std::unique_ptr< ::seqsvr::Router> router) = delete;
  virtual folly::Future<bool> future_SaveRouteTable(std::unique_ptr< ::seqsvr::Router> router) = 0;
};

class StoreServiceAsyncProcessor;

class StoreServiceSvIf : public StoreServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef StoreServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  virtual void LoadMaxSeqsData( ::seqsvr::MaxSeqsData& /*_return*/);
  folly::Future<std::unique_ptr< ::seqsvr::MaxSeqsData>> future_LoadMaxSeqsData() override;
  void async_tm_LoadMaxSeqsData(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::MaxSeqsData>>> callback) override;
  virtual int64_t SaveMaxSeq(int32_t /*id*/, int64_t /*max_seq*/);
  folly::Future<int64_t> future_SaveMaxSeq(int32_t id, int64_t max_seq) override;
  void async_tm_SaveMaxSeq(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t id, int64_t max_seq) override;
  virtual void LoadRouteTable( ::seqsvr::Router& /*_return*/);
  folly::Future<std::unique_ptr< ::seqsvr::Router>> future_LoadRouteTable() override;
  void async_tm_LoadRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::Router>>> callback) override;
  virtual bool SaveRouteTable(std::unique_ptr< ::seqsvr::Router> /*router*/);
  folly::Future<bool> future_SaveRouteTable(std::unique_ptr< ::seqsvr::Router> router) override;
  void async_tm_SaveRouteTable(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, std::unique_ptr< ::seqsvr::Router> router) override;
};

class StoreServiceSvNull : public StoreServiceSvIf {
 public:
  void LoadMaxSeqsData( ::seqsvr::MaxSeqsData& /*_return*/) override;
  int64_t SaveMaxSeq(int32_t /*id*/, int64_t /*max_seq*/) override;
  void LoadRouteTable( ::seqsvr::Router& /*_return*/) override;
  bool SaveRouteTable(std::unique_ptr< ::seqsvr::Router> /*router*/) override;
};

class StoreServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  using BaseAsyncProcessor = void;
  using HasFrozen2 = std::false_type;
 protected:
  StoreServiceSvIf* iface_;
  folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) override;
 public:
  void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) override;
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<StoreServiceAsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const StoreServiceAsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static const StoreServiceAsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<StoreServiceAsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const StoreServiceAsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static const StoreServiceAsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_LoadMaxSeqsData(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_LoadMaxSeqsData(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_LoadMaxSeqsData(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::seqsvr::MaxSeqsData const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_LoadMaxSeqsData(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_SaveMaxSeq(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_SaveMaxSeq(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_SaveMaxSeq(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int64_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_SaveMaxSeq(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_LoadRouteTable(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_LoadRouteTable(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_LoadRouteTable(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::seqsvr::Router const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_LoadRouteTable(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_SaveRouteTable(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_SaveRouteTable(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_SaveRouteTable(int32_t protoSeqId, apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_SaveRouteTable(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  StoreServiceAsyncProcessor(StoreServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~StoreServiceAsyncProcessor() {}
};

class StoreServiceAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual const char* getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, folly::DelayedDestruction::Destructor> channel_ptr;

  virtual ~StoreServiceAsyncClient() {}

  StoreServiceAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_.reset(new apache::thrift::Cpp2ConnContext);
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }

  apache::thrift::HeaderChannel*  getHeaderChannel() {
    return dynamic_cast<apache::thrift::HeaderChannel*>(this->channel_.get());
  }
  virtual void LoadMaxSeqsData(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void LoadMaxSeqsData(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 private:
  virtual void LoadMaxSeqsDataImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 public:
  virtual void sync_LoadMaxSeqsData( ::seqsvr::MaxSeqsData& _return);
  virtual void sync_LoadMaxSeqsData(apache::thrift::RpcOptions& rpcOptions,  ::seqsvr::MaxSeqsData& _return);
  virtual folly::Future< ::seqsvr::MaxSeqsData> future_LoadMaxSeqsData();
  virtual folly::Future< ::seqsvr::MaxSeqsData> future_LoadMaxSeqsData(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<std::pair< ::seqsvr::MaxSeqsData, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_LoadMaxSeqsData(apache::thrift::RpcOptions& rpcOptions);
  virtual void LoadMaxSeqsData(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);
  static folly::exception_wrapper recv_wrapped_LoadMaxSeqsData( ::seqsvr::MaxSeqsData& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_LoadMaxSeqsData( ::seqsvr::MaxSeqsData& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_LoadMaxSeqsData( ::seqsvr::MaxSeqsData& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_LoadMaxSeqsData( ::seqsvr::MaxSeqsData& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void LoadMaxSeqsDataT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_LoadMaxSeqsDataT(Protocol_* prot,  ::seqsvr::MaxSeqsData& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_LoadMaxSeqsDataT(Protocol_* prot,  ::seqsvr::MaxSeqsData& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void SaveMaxSeq(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t id, int64_t max_seq);
  virtual void SaveMaxSeq(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t id, int64_t max_seq);
 private:
  virtual void SaveMaxSeqImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t id, int64_t max_seq);
 public:
  virtual int64_t sync_SaveMaxSeq(int32_t id, int64_t max_seq);
  virtual int64_t sync_SaveMaxSeq(apache::thrift::RpcOptions& rpcOptions, int32_t id, int64_t max_seq);
  virtual folly::Future<int64_t> future_SaveMaxSeq(int32_t id, int64_t max_seq);
  virtual folly::Future<int64_t> future_SaveMaxSeq(apache::thrift::RpcOptions& rpcOptions, int32_t id, int64_t max_seq);
  virtual folly::Future<std::pair<int64_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_SaveMaxSeq(apache::thrift::RpcOptions& rpcOptions, int32_t id, int64_t max_seq);
  virtual void SaveMaxSeq(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t id, int64_t max_seq);
  static folly::exception_wrapper recv_wrapped_SaveMaxSeq(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int64_t recv_SaveMaxSeq(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int64_t recv_instance_SaveMaxSeq(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_SaveMaxSeq(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void SaveMaxSeqT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t id, int64_t max_seq);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_SaveMaxSeqT(Protocol_* prot, int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static int64_t recv_SaveMaxSeqT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void LoadRouteTable(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void LoadRouteTable(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 private:
  virtual void LoadRouteTableImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 public:
  virtual void sync_LoadRouteTable( ::seqsvr::Router& _return);
  virtual void sync_LoadRouteTable(apache::thrift::RpcOptions& rpcOptions,  ::seqsvr::Router& _return);
  virtual folly::Future< ::seqsvr::Router> future_LoadRouteTable();
  virtual folly::Future< ::seqsvr::Router> future_LoadRouteTable(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<std::pair< ::seqsvr::Router, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_LoadRouteTable(apache::thrift::RpcOptions& rpcOptions);
  virtual void LoadRouteTable(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);
  static folly::exception_wrapper recv_wrapped_LoadRouteTable( ::seqsvr::Router& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_LoadRouteTable( ::seqsvr::Router& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_LoadRouteTable( ::seqsvr::Router& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_LoadRouteTable( ::seqsvr::Router& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void LoadRouteTableT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_LoadRouteTableT(Protocol_* prot,  ::seqsvr::Router& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_LoadRouteTableT(Protocol_* prot,  ::seqsvr::Router& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void SaveRouteTable(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::Router& router);
  virtual void SaveRouteTable(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::Router& router);
 private:
  virtual void SaveRouteTableImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::Router& router);
 public:
  virtual bool sync_SaveRouteTable(const  ::seqsvr::Router& router);
  virtual bool sync_SaveRouteTable(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::Router& router);
  virtual folly::Future<bool> future_SaveRouteTable(const  ::seqsvr::Router& router);
  virtual folly::Future<bool> future_SaveRouteTable(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::Router& router);
  virtual folly::Future<std::pair<bool, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_SaveRouteTable(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::Router& router);
  virtual void SaveRouteTable(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::seqsvr::Router& router);
  static folly::exception_wrapper recv_wrapped_SaveRouteTable(bool& _return, ::apache::thrift::ClientReceiveState& state);
  static bool recv_SaveRouteTable(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual bool recv_instance_SaveRouteTable(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_SaveRouteTable(bool& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void SaveRouteTableT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::Router& router);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_SaveRouteTableT(Protocol_* prot, bool& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static bool recv_SaveRouteTableT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::Cpp2ConnContext> connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
