/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MediateService.h"

#include "MediateService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
namespace seqsvr {

const char* MediateServiceAsyncClient::getServiceName() {
  return "MediateService";
}

void MediateServiceAsyncClient::RegisterAllocSvr(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  ::apache::thrift::RpcOptions rpcOptions;
  RegisterAllocSvrImpl(false, rpcOptions, std::move(callback), node_addr);
}

void MediateServiceAsyncClient::RegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  RegisterAllocSvrImpl(false, rpcOptions, std::move(callback), node_addr);
}

void MediateServiceAsyncClient::RegisterAllocSvrImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      RegisterAllocSvrT(&writer, useSync, rpcOptions, std::move(callback), node_addr);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      RegisterAllocSvrT(&writer, useSync, rpcOptions, std::move(callback), node_addr);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void MediateServiceAsyncClient::sync_RegisterAllocSvr(const  ::seqsvr::NodeAddrInfo& node_addr) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_RegisterAllocSvr(rpcOptions, node_addr);
}

void MediateServiceAsyncClient::sync_RegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::NodeAddrInfo& node_addr) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  RegisterAllocSvrImpl(true, rpcOptions, std::move(callback), node_addr);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_RegisterAllocSvr(_returnState);
}

folly::Future<folly::Unit> MediateServiceAsyncClient::future_RegisterAllocSvr(const  ::seqsvr::NodeAddrInfo& node_addr) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_RegisterAllocSvr(rpcOptions, node_addr);
}

folly::Future<folly::Unit> MediateServiceAsyncClient::future_RegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::NodeAddrInfo& node_addr) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_RegisterAllocSvr, channel_);
  RegisterAllocSvr(rpcOptions, std::move(callback), node_addr);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> MediateServiceAsyncClient::header_future_RegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::NodeAddrInfo& node_addr) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_RegisterAllocSvr, channel_);
  RegisterAllocSvr(rpcOptions, std::move(callback), node_addr);
  return _future;
}

void MediateServiceAsyncClient::RegisterAllocSvr(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  RegisterAllocSvr(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), node_addr);
}

folly::exception_wrapper MediateServiceAsyncClient::recv_wrapped_RegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_RegisterAllocSvrT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_RegisterAllocSvrT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void MediateServiceAsyncClient::recv_RegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_RegisterAllocSvr(state);
  if (ew) {
    ew.throw_exception();
  }
}

void MediateServiceAsyncClient::recv_instance_RegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  recv_RegisterAllocSvr(state);
}

folly::exception_wrapper MediateServiceAsyncClient::recv_instance_wrapped_RegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_RegisterAllocSvr(state);
}

void MediateServiceAsyncClient::UnRegisterAllocSvr(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  ::apache::thrift::RpcOptions rpcOptions;
  UnRegisterAllocSvrImpl(false, rpcOptions, std::move(callback), node_addr);
}

void MediateServiceAsyncClient::UnRegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  UnRegisterAllocSvrImpl(false, rpcOptions, std::move(callback), node_addr);
}

void MediateServiceAsyncClient::UnRegisterAllocSvrImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      UnRegisterAllocSvrT(&writer, useSync, rpcOptions, std::move(callback), node_addr);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      UnRegisterAllocSvrT(&writer, useSync, rpcOptions, std::move(callback), node_addr);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void MediateServiceAsyncClient::sync_UnRegisterAllocSvr(const  ::seqsvr::NodeAddrInfo& node_addr) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_UnRegisterAllocSvr(rpcOptions, node_addr);
}

void MediateServiceAsyncClient::sync_UnRegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::NodeAddrInfo& node_addr) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, false);
  UnRegisterAllocSvrImpl(true, rpcOptions, std::move(callback), node_addr);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_UnRegisterAllocSvr(_returnState);
}

folly::Future<folly::Unit> MediateServiceAsyncClient::future_UnRegisterAllocSvr(const  ::seqsvr::NodeAddrInfo& node_addr) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_UnRegisterAllocSvr(rpcOptions, node_addr);
}

folly::Future<folly::Unit> MediateServiceAsyncClient::future_UnRegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::NodeAddrInfo& node_addr) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_UnRegisterAllocSvr, channel_);
  UnRegisterAllocSvr(rpcOptions, std::move(callback), node_addr);
  return _future;
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> MediateServiceAsyncClient::header_future_UnRegisterAllocSvr(apache::thrift::RpcOptions& rpcOptions, const  ::seqsvr::NodeAddrInfo& node_addr) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_UnRegisterAllocSvr, channel_);
  UnRegisterAllocSvr(rpcOptions, std::move(callback), node_addr);
  return _future;
}

void MediateServiceAsyncClient::UnRegisterAllocSvr(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::seqsvr::NodeAddrInfo& node_addr) {
  UnRegisterAllocSvr(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), node_addr);
}

folly::exception_wrapper MediateServiceAsyncClient::recv_wrapped_UnRegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_UnRegisterAllocSvrT(&reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_UnRegisterAllocSvrT(&reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void MediateServiceAsyncClient::recv_UnRegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_UnRegisterAllocSvr(state);
  if (ew) {
    ew.throw_exception();
  }
}

void MediateServiceAsyncClient::recv_instance_UnRegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  recv_UnRegisterAllocSvr(state);
}

folly::exception_wrapper MediateServiceAsyncClient::recv_instance_wrapped_UnRegisterAllocSvr(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_UnRegisterAllocSvr(state);
}

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
