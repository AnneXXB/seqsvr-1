/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "seqsvr_types.h"

#include "seqsvr_types.tcc"

#include <algorithm>

#include <folly/Indestructible.h>

#include "seqsvr_data.h"



namespace seqsvr {

void NodeAddrInfo::__clear() {
  // clear all fields
  ip = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  port = 0;
  __isset.__clear();
}

bool NodeAddrInfo::operator==(const NodeAddrInfo& rhs) const {
  if (!((ip == rhs.ip))) {
    return false;
  }
  if (!((port == rhs.port))) {
    return false;
  }
  return true;
}

void NodeAddrInfo::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "ip") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "port") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(NodeAddrInfo& a, NodeAddrInfo& b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

template uint32_t NodeAddrInfo::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t NodeAddrInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t NodeAddrInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NodeAddrInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NodeAddrInfo::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t NodeAddrInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t NodeAddrInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t NodeAddrInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t NodeAddrInfo::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t NodeAddrInfo::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t NodeAddrInfo::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t NodeAddrInfo::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void RangeID::__clear() {
  // clear all fields
  id_begin = 0;
  size = 0;
  __isset.__clear();
}

bool RangeID::operator==(const RangeID& rhs) const {
  if (!((id_begin == rhs.id_begin))) {
    return false;
  }
  if (!((size == rhs.size))) {
    return false;
  }
  return true;
}

void RangeID::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id_begin") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "size") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
}

void swap(RangeID& a, RangeID& b) {
  using ::std::swap;
  swap(a.id_begin, b.id_begin);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

template uint32_t RangeID::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RangeID::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RangeID::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RangeID::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RangeID::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t RangeID::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RangeID::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RangeID::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RangeID::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t RangeID::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t RangeID::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t RangeID::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void RouterNode::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::clear(&node_addr);
  section_ranges.clear();
  __isset.__clear();
}

bool RouterNode::operator==(const RouterNode& rhs) const {
  if (!((node_addr == rhs.node_addr))) {
    return false;
  }
  if (!((section_ranges == rhs.section_ranges))) {
    return false;
  }
  return true;
}

const  ::seqsvr::NodeAddrInfo& RouterNode::get_node_addr() const& {
  return node_addr;
}

 ::seqsvr::NodeAddrInfo RouterNode::get_node_addr() && {
  return std::move(node_addr);
}

const std::vector< ::seqsvr::RangeID>& RouterNode::get_section_ranges() const& {
  return section_ranges;
}

std::vector< ::seqsvr::RangeID> RouterNode::get_section_ranges() && {
  return std::move(section_ranges);
}

void RouterNode::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "node_addr") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "section_ranges") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(RouterNode& a, RouterNode& b) {
  using ::std::swap;
  swap(a.node_addr, b.node_addr);
  swap(a.section_ranges, b.section_ranges);
  swap(a.__isset, b.__isset);
}

template uint32_t RouterNode::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RouterNode::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RouterNode::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RouterNode::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RouterNode::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t RouterNode::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RouterNode::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RouterNode::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RouterNode::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t RouterNode::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t RouterNode::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t RouterNode::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void Router::__clear() {
  // clear all fields
  version = 0;
  node_list.clear();
  __isset.__clear();
}

bool Router::operator==(const Router& rhs) const {
  if (!((version == rhs.version))) {
    return false;
  }
  if (!((node_list == rhs.node_list))) {
    return false;
  }
  return true;
}

const std::vector< ::seqsvr::RouterNode>& Router::get_node_list() const& {
  return node_list;
}

std::vector< ::seqsvr::RouterNode> Router::get_node_list() && {
  return std::move(node_list);
}

void Router::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "version") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "node_list") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Router& a, Router& b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.node_list, b.node_list);
  swap(a.__isset, b.__isset);
}

template uint32_t Router::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Router::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Router::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Router::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Router::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Router::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Router::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Router::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Router::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t Router::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Router::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t Router::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void SetNodeInfo::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::clear(&set_id);
  ::apache::thrift::Cpp2Ops<  ::seqsvr::NodeAddrInfo>::clear(&node_addr);
  __isset.__clear();
}

bool SetNodeInfo::operator==(const SetNodeInfo& rhs) const {
  if (!((set_id == rhs.set_id))) {
    return false;
  }
  if (!((node_addr == rhs.node_addr))) {
    return false;
  }
  return true;
}

const  ::seqsvr::RangeID& SetNodeInfo::get_set_id() const& {
  return set_id;
}

 ::seqsvr::RangeID SetNodeInfo::get_set_id() && {
  return std::move(set_id);
}

const  ::seqsvr::NodeAddrInfo& SetNodeInfo::get_node_addr() const& {
  return node_addr;
}

 ::seqsvr::NodeAddrInfo SetNodeInfo::get_node_addr() && {
  return std::move(node_addr);
}

void SetNodeInfo::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "set_id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "node_addr") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(SetNodeInfo& a, SetNodeInfo& b) {
  using ::std::swap;
  swap(a.set_id, b.set_id);
  swap(a.node_addr, b.node_addr);
  swap(a.__isset, b.__isset);
}

template uint32_t SetNodeInfo::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetNodeInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetNodeInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeInfo::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetNodeInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetNodeInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeInfo::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t SetNodeInfo::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t SetNodeInfo::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t SetNodeInfo::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void SetNodeInfoList::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::clear(&set_id);
  node_addrs.clear();
  __isset.__clear();
}

bool SetNodeInfoList::operator==(const SetNodeInfoList& rhs) const {
  if (!((set_id == rhs.set_id))) {
    return false;
  }
  if (!((node_addrs == rhs.node_addrs))) {
    return false;
  }
  return true;
}

const  ::seqsvr::RangeID& SetNodeInfoList::get_set_id() const& {
  return set_id;
}

 ::seqsvr::RangeID SetNodeInfoList::get_set_id() && {
  return std::move(set_id);
}

const std::vector< ::seqsvr::NodeAddrInfo>& SetNodeInfoList::get_node_addrs() const& {
  return node_addrs;
}

std::vector< ::seqsvr::NodeAddrInfo> SetNodeInfoList::get_node_addrs() && {
  return std::move(node_addrs);
}

void SetNodeInfoList::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "set_id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "node_addrs") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(SetNodeInfoList& a, SetNodeInfoList& b) {
  using ::std::swap;
  swap(a.set_id, b.set_id);
  swap(a.node_addrs, b.node_addrs);
  swap(a.__isset, b.__isset);
}

template uint32_t SetNodeInfoList::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetNodeInfoList::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetNodeInfoList::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeInfoList::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeInfoList::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetNodeInfoList::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetNodeInfoList::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeInfoList::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeInfoList::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t SetNodeInfoList::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t SetNodeInfoList::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t SetNodeInfoList::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void PerSetRouterTable::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::clear(&set_id);
  node_list.clear();
  __isset.__clear();
}

bool PerSetRouterTable::operator==(const PerSetRouterTable& rhs) const {
  if (!((set_id == rhs.set_id))) {
    return false;
  }
  if (!((node_list == rhs.node_list))) {
    return false;
  }
  return true;
}

const  ::seqsvr::RangeID& PerSetRouterTable::get_set_id() const& {
  return set_id;
}

 ::seqsvr::RangeID PerSetRouterTable::get_set_id() && {
  return std::move(set_id);
}

const std::vector< ::seqsvr::RouterNode>& PerSetRouterTable::get_node_list() const& {
  return node_list;
}

std::vector< ::seqsvr::RouterNode> PerSetRouterTable::get_node_list() && {
  return std::move(node_list);
}

void PerSetRouterTable::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "set_id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "node_list") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(PerSetRouterTable& a, PerSetRouterTable& b) {
  using ::std::swap;
  swap(a.set_id, b.set_id);
  swap(a.node_list, b.node_list);
  swap(a.__isset, b.__isset);
}

template uint32_t PerSetRouterTable::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PerSetRouterTable::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PerSetRouterTable::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PerSetRouterTable::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PerSetRouterTable::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t PerSetRouterTable::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PerSetRouterTable::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PerSetRouterTable::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PerSetRouterTable::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t PerSetRouterTable::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t PerSetRouterTable::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t PerSetRouterTable::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void Sequence::__clear() {
  // clear all fields
  sequence = 0;
  ::apache::thrift::Cpp2Ops<  ::seqsvr::Router>::clear(&router);
  __isset.__clear();
}

bool Sequence::operator==(const Sequence& rhs) const {
  if (!((sequence == rhs.sequence))) {
    return false;
  }
  if (__isset.router != rhs.__isset.router) {
    return false;
  }
  else if (__isset.router && !((router == rhs.router))) {
    return false;
  }
  return true;
}

const  ::seqsvr::Router* Sequence::get_router() const& {
  return __isset.router ? std::addressof(router) : nullptr;
}

 ::seqsvr::Router* Sequence::get_router() & {
  return __isset.router ? std::addressof(router) : nullptr;
}

void Sequence::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "sequence") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "router") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
}

void swap(Sequence& a, Sequence& b) {
  using ::std::swap;
  swap(a.sequence, b.sequence);
  swap(a.router, b.router);
  swap(a.__isset, b.__isset);
}

template uint32_t Sequence::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Sequence::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Sequence::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Sequence::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Sequence::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Sequence::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Sequence::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Sequence::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Sequence::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t Sequence::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Sequence::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t Sequence::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

void MaxSeqsData::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::seqsvr::RangeID>::clear(&set_id);
  max_seqs.clear();
  __isset.__clear();
}

bool MaxSeqsData::operator==(const MaxSeqsData& rhs) const {
  if (!((set_id == rhs.set_id))) {
    return false;
  }
  if (!((max_seqs == rhs.max_seqs))) {
    return false;
  }
  return true;
}

const  ::seqsvr::RangeID& MaxSeqsData::get_set_id() const& {
  return set_id;
}

 ::seqsvr::RangeID MaxSeqsData::get_set_id() && {
  return std::move(set_id);
}

const std::vector<int64_t>& MaxSeqsData::get_max_seqs() const& {
  return max_seqs;
}

std::vector<int64_t> MaxSeqsData::get_max_seqs() && {
  return std::move(max_seqs);
}

void MaxSeqsData::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "set_id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "max_seqs") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(MaxSeqsData& a, MaxSeqsData& b) {
  using ::std::swap;
  swap(a.set_id, b.set_id);
  swap(a.max_seqs, b.max_seqs);
  swap(a.__isset, b.__isset);
}

template uint32_t MaxSeqsData::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MaxSeqsData::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MaxSeqsData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MaxSeqsData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MaxSeqsData::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t MaxSeqsData::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MaxSeqsData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MaxSeqsData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MaxSeqsData::read<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t MaxSeqsData::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t MaxSeqsData::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t MaxSeqsData::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
namespace seqsvr {

} // seqsvr
