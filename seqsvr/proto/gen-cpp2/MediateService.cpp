/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MediateService.h"

#include "MediateService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
namespace seqsvr {

std::unique_ptr<apache::thrift::AsyncProcessor> MediateServiceSvIf::getProcessor() {
  return std::make_unique<MediateServiceAsyncProcessor>(this);
}

void MediateServiceSvIf::RegisterAllocSvr(std::unique_ptr< ::seqsvr::NodeAddrInfo> /*node_addr*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("RegisterAllocSvr");
}

folly::Future<folly::Unit> MediateServiceSvIf::future_RegisterAllocSvr(std::unique_ptr< ::seqsvr::NodeAddrInfo> node_addr) {
  return apache::thrift::detail::si::future([&] { return RegisterAllocSvr(std::move(node_addr)); });
}

void MediateServiceSvIf::async_tm_RegisterAllocSvr(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr< ::seqsvr::NodeAddrInfo> node_addr) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_RegisterAllocSvr(std::move(node_addr)); });
}

void MediateServiceSvIf::UnRegisterAllocSvr(std::unique_ptr< ::seqsvr::NodeAddrInfo> /*node_addr*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("UnRegisterAllocSvr");
}

folly::Future<folly::Unit> MediateServiceSvIf::future_UnRegisterAllocSvr(std::unique_ptr< ::seqsvr::NodeAddrInfo> node_addr) {
  return apache::thrift::detail::si::future([&] { return UnRegisterAllocSvr(std::move(node_addr)); });
}

void MediateServiceSvIf::async_tm_UnRegisterAllocSvr(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr< ::seqsvr::NodeAddrInfo> node_addr) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_UnRegisterAllocSvr(std::move(node_addr)); });
}

void MediateServiceSvNull::RegisterAllocSvr(std::unique_ptr< ::seqsvr::NodeAddrInfo> /*node_addr*/) {}

void MediateServiceSvNull::UnRegisterAllocSvr(std::unique_ptr< ::seqsvr::NodeAddrInfo> /*node_addr*/) {}

const char* MediateServiceAsyncProcessor::getServiceName() {
  return "MediateService";
}

folly::Optional<std::string> MediateServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void MediateServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool MediateServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> MediateServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> MediateServiceAsyncProcessor::cacheKeyMap_ {};
const MediateServiceAsyncProcessor::BinaryProtocolProcessMap& MediateServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const MediateServiceAsyncProcessor::BinaryProtocolProcessMap MediateServiceAsyncProcessor::binaryProcessMap_ {
  {"RegisterAllocSvr", &MediateServiceAsyncProcessor::_processInThread_RegisterAllocSvr<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"UnRegisterAllocSvr", &MediateServiceAsyncProcessor::_processInThread_UnRegisterAllocSvr<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const MediateServiceAsyncProcessor::CompactProtocolProcessMap& MediateServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const MediateServiceAsyncProcessor::CompactProtocolProcessMap MediateServiceAsyncProcessor::compactProcessMap_ {
  {"RegisterAllocSvr", &MediateServiceAsyncProcessor::_processInThread_RegisterAllocSvr<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"UnRegisterAllocSvr", &MediateServiceAsyncProcessor::_processInThread_UnRegisterAllocSvr<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
