/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AllocService.h"

#include "AllocService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>
namespace seqsvr {

std::unique_ptr<apache::thrift::AsyncProcessor> AllocServiceSvIf::getProcessor() {
  return std::make_unique<AllocServiceAsyncProcessor>(this);
}

void AllocServiceSvIf::FetchNextSequence( ::seqsvr::Sequence& /*_return*/, int32_t /*id*/, int32_t /*version*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("FetchNextSequence");
}

folly::Future<std::unique_ptr< ::seqsvr::Sequence>> AllocServiceSvIf::future_FetchNextSequence(int32_t id, int32_t version) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::seqsvr::Sequence& _return) { FetchNextSequence(_return, id, version); });
}

void AllocServiceSvIf::async_tm_FetchNextSequence(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::Sequence>>> callback, int32_t id, int32_t version) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_FetchNextSequence(id, version); });
}

void AllocServiceSvIf::GetCurrentSequence( ::seqsvr::Sequence& /*_return*/, int32_t /*id*/, int32_t /*version*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("GetCurrentSequence");
}

folly::Future<std::unique_ptr< ::seqsvr::Sequence>> AllocServiceSvIf::future_GetCurrentSequence(int32_t id, int32_t version) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::seqsvr::Sequence& _return) { GetCurrentSequence(_return, id, version); });
}

void AllocServiceSvIf::async_tm_GetCurrentSequence(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::seqsvr::Sequence>>> callback, int32_t id, int32_t version) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_GetCurrentSequence(id, version); });
}

void AllocServiceSvNull::FetchNextSequence( ::seqsvr::Sequence& /*_return*/, int32_t /*id*/, int32_t /*version*/) {}

void AllocServiceSvNull::GetCurrentSequence( ::seqsvr::Sequence& /*_return*/, int32_t /*id*/, int32_t /*version*/) {}

const char* AllocServiceAsyncProcessor::getServiceName() {
  return "AllocService";
}

folly::Optional<std::string> AllocServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void AllocServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool AllocServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> AllocServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> AllocServiceAsyncProcessor::cacheKeyMap_ {};
const AllocServiceAsyncProcessor::BinaryProtocolProcessMap& AllocServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const AllocServiceAsyncProcessor::BinaryProtocolProcessMap AllocServiceAsyncProcessor::binaryProcessMap_ {
  {"FetchNextSequence", &AllocServiceAsyncProcessor::_processInThread_FetchNextSequence<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"GetCurrentSequence", &AllocServiceAsyncProcessor::_processInThread_GetCurrentSequence<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const AllocServiceAsyncProcessor::CompactProtocolProcessMap& AllocServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const AllocServiceAsyncProcessor::CompactProtocolProcessMap AllocServiceAsyncProcessor::compactProcessMap_ {
  {"FetchNextSequence", &AllocServiceAsyncProcessor::_processInThread_FetchNextSequence<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"GetCurrentSequence", &AllocServiceAsyncProcessor::_processInThread_GetCurrentSequence<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

} // seqsvr
namespace apache { namespace thrift {

}} // apache::thrift
